// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean current;
    /** Initializes the Screen. */
    function void init() {
        let current = true;
        do Screen.clearScreen();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 24321){
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let current = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int inp, i, shift, temp;
        let shift = x - ((x/16) * 16);
        let i = 0;
        let inp = 1;
        while (i < shift){
            let inp = inp + inp;
            let i = i + 1;
        }
        if (~current) {
            let inp = ~inp;
            let temp = Memory.peek(16384 + (y * 32) + (x/16));
            let inp = (temp & inp);
        }
        else{

            let temp = Memory.peek(16384 + (y * 32) + (x/16));

            let inp = (temp | inp);
        }
        do Memory.poke(16384 + (y * 32) + (x/16), inp);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adymbdx,x,y;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let x = x1;
        let y = y1;
        let a = 0;
        let b = 0;
        if (dx=0){
            if (dy>0){
                while (b < dy){
                    do Screen.drawPixel(x1, y1 + b);
                    let b = b + 1;
                }
            }
            else {
                while (dy<b){
                    do Screen.drawPixel(x1, y1 + b);
                    let b = b - 1;
                }
            }
            return;
        }
        if (dy=0){
            if (dx>0){
                while (a < dx){
                    do Screen.drawPixel(x1 + a, y1);
                    let a = a + 1;
                }
            }
            else {
                while (dx<a){
                    do Screen.drawPixel(x1 + a, y1);
                    let a = a - 1;
                }
            }
            return;
        }
        if ((dx>0) = (dy>0)){
            if (dx < 0){
                let x = x2;
                let y = y2;
                let dx = -dx;
                let dy = -dy;
            }
            else{
                let x = x1;
                let y = y1;
            }
            while (~(a>dx) & ~(b>dy)) {
                if (adymbdx <0) {
                    do Screen.drawPixel(x + a, y + b);
                    let adymbdx = adymbdx + dy;
                    let a = a + 1;
                }
                else {
                    let adymbdx = adymbdx - dx;
                    let b = b + 1;
                }
            }
            return;
        }
        if (dx<0) {
            while (~(a<dx) & ~(b>dy)){
                if (adymbdx > 0){
                    do Screen.drawPixel(x + a, y + b);
                    let adymbdx = adymbdx - dy;
                    let a = a - 1;
                }
                else {
                    do Screen.drawPixel(x + a, y + b);
                    let adymbdx = adymbdx - dx;
                    let b = b + 1;
                }
            }
            return;
        }
        if (dy<0) {
            while (~(a>dx) & ~(b<dy)){
                if (adymbdx > 0){
                    do Screen.drawPixel(x + a, y + b);
                    let adymbdx = adymbdx + dy;
                    let a = a + 1;
                }
                else {
                    do Screen.drawPixel(x + a, y + b);
                    let adymbdx = adymbdx + dx;
                    let b = b - 1;
                }
            }
            return;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int b, dy;
        let dy = y2-y1;
        let b = 0;
        while (~(b>dy)){
            do Screen.drawLine (x1,b+y1, x2, b+y1);
            let b = b+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i;
        let i = -r;
        while (i < r) {
            do Screen.drawLine(x - Math.sqrt((r*r)-(i*i)),y+i,x+Math.sqrt((r*r)-(i*i)),y+i);
            let i = i+1;
        }
        return;
    }
}
